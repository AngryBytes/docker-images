name: build

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    - cron: "42 3 * * *"
  workflow_dispatch:

jobs:
  build:
    name: build
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        image:
          - "abc-base:8.3"
          - "abc-base:8.4"
        arch:
          - amd64
          - arm64
        include:
          - arch: amd64
            runner: ubuntu-latest
          - arch: arm64
            runner: ubuntu-24.04-arm
    runs-on: "${{ matrix.runner }}"
    outputs:
      should_push: ${{ steps.cfg.outputs.should_push }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Prepare
        id: cfg
        run: |
          echo "image_repo=$(cut -d: -f1 <<< '${{ matrix.image }}')" >> $GITHUB_ENV
          echo "image_tag=$(cut -d: -f2 <<< '${{ matrix.image }}')" >> $GITHUB_ENV
          echo "should_push=${{ github.event_name != 'pull_request' && github.repository_owner == 'AngryBytes' }}" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        id: build
        uses: docker/build-push-action@v6
        with:
          context: "./${{ env.image_repo }}/${{ env.image_tag }}/"
          platforms: linux/${{ matrix.arch }}
          tags: |
            ghcr.io/angrybytes/${{ env.image_repo }}
            angrybytes/${{ env.image_repo }}
          pull: true
          outputs: "type=image,push-by-digest=true,name-canonical=true,push=${{ steps.cfg.outputs.should_push }}"
          cache-from: "type=registry,ref=ghcr.io/angrybytes/${{ matrix.image }}"
          cache-to: "type=inline"

      - name: Export digest
        run: |
          digests_dir="${{ runner.temp }}/digests/$image_repo/$image_tag"
          mkdir -p "$digests_dir"
          digest="${{ steps.build.outputs.digest }}"
          touch "$digests_dir/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v5
        with:
          name: "digests-${{ env.image_repo }}-${{ env.image_tag }}-${{ matrix.arch }}"
          path: "${{ runner.temp }}/digests/"
          if-no-files-found: error
          retention-days: 1

  merge:
    needs: [build]
    if: "${{ needs.build.outputs.should_push }}"
    runs-on: ubuntu-latest
    steps:
      - name: Download digests
        uses: actions/download-artifact@v5
        with:
          path: "${{ runner.temp }}/digests"
          pattern: "digests-*"
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create manifest list and push
        working-directory: "${{ runner.temp }}/digests"
        run: |
          for subdir in */*; do
            pushd "$subdir"
            image_repo="$(cut -d/ -f1 <<< "$subdir")"
            image_tag="$(cut -d/ -f2 <<< "$subdir")"

            image_fullrepo="ghcr.io/angrybytes/$image_repo"
            image_fullname="$image_fullrepo:$image_tag"
            docker buildx imagetools create -t "$image_fullname" $(printf "$image_fullrepo@sha256:%s " *)
            docker buildx imagetools inspect "$image_fullname"

            image_fullrepo="angrybytes/$image_repo"
            image_fullname="$image_fullrepo:$image_tag"
            docker buildx imagetools create -t "$image_fullname" $(printf "$image_fullrepo@sha256:%s " *)
            docker buildx imagetools inspect "$image_fullname"

            popd
          done
